import os
import pickle
import rasterio as rio

from .geogrid import GeoGrid
from .stream import StreamNetwork, Stream


def load(filename):
    """Read a geospatial data"""

    with rio.open(filename) as dataset:
        data = dataset.read(1)  # DEM data only have 1 band.
        crs = dataset.crs
        transform = dataset.meta['transform']
        metadata = dataset.meta

    outdata = GeoGrid(data, crs, transform, metadata)

    return outdata


def network_to_shp(stream_network: StreamNetwork,
                   filename: str):

    stream_list = stream_network.to_streams(mode='tributary')
    stream_to_shp(stream_list, filename)


def stream_to_shp(stream, filename:str):
    if isinstance(stream, Stream):
        stream_list = [stream]
    else:
        stream_list = stream

    line_list = []
    for s in stream_list:
        i_list = s.dataset['rows'].data
        j_list = s.dataset['cols'].data

        x_list, y_list = s.rowcol_to_xy(i_list, j_list)

        xy_coords = [[x_list[k], y_list[k]] for k in range(len(x_list))]

        line_list.append(xy_coords)

    import shapefile
    with shapefile.Writer(filename) as w:
        w.field('name', 'C')
        for line in line_list:
            w.line([line])
            w.record('Stream network generated by DEMAP')


def stream_to_excel(stream, filename: str):
    import pandas as pd
    if isinstance(stream, Stream):
        stream_list = [stream]
    else:
        stream_list = stream

    df_list = []
    for s in stream_list:
        df = s.dataset.to_dataframe()

        df = df.drop(['rows', 'cols'], axis=1)

        i_list = s.dataset['rows'].data
        j_list = s.dataset['cols'].data
        x_list, y_list = s.rowcol_to_xy(i_list, j_list)
        
        df.insert(0, 'Y', y_list)
        df.insert(0, 'X', x_list)
        
        df_list.append(df)

    with pd.ExcelWriter(filename) as writer:
        for k in range(len(df_list)):
            df_list[k].to_excel(writer, sheet_name='{}'.format(k+1))


def dump_pickle(res, filename):
    with open(filename, 'xb') as out_file:  # Fail if file exists.
        pickle.dump(res, out_file, pickle.HIGHEST_PROTOCOL)


def load_pickle(filename):
    with open(filename, 'rb') as in_file:
        res = pickle.load(in_file)
    return res
